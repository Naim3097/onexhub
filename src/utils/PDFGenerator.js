import jsPDF from 'jspdf'

class PDFGenerator {
  static generateInvoicePDF(invoice) {
    const doc = new jsPDF()
    
    // Set up fonts and colors
    doc.setFont('helvetica')
    
    // Header - Company Info
    doc.setFontSize(24)
    doc.setTextColor(0, 0, 0) // Black
    doc.text('INVOICE', 20, 25)
    
    doc.setFontSize(12)
    doc.setTextColor(102, 102, 102) // Gray
    doc.text('Mechanic Parts & Invoice System', 20, 35)
    
    // Invoice Details (Right side)
    doc.setFontSize(16)
    doc.setTextColor(220, 38, 38) // Red
    doc.text(invoice.invoiceNumber, 150, 25)
    
    doc.setFontSize(10)
    doc.setTextColor(0, 0, 0)
    doc.text(`Date: ${new Date(invoice.dateCreated).toLocaleDateString()}`, 150, 35)
    
    // Customer Information (if exists)
    let yPos = 50
    if (invoice.customerInfo?.name || invoice.customerInfo?.phone || invoice.customerInfo?.address) {
      doc.setFontSize(12)
      doc.setTextColor(0, 0, 0)
      doc.text('Bill To:', 20, yPos)
      yPos += 10
      
      if (invoice.customerInfo.name) {
        doc.setFontSize(11)
        doc.text(invoice.customerInfo.name, 20, yPos)
        yPos += 8
      }
      if (invoice.customerInfo.phone) {
        doc.setFontSize(10)
        doc.setTextColor(102, 102, 102)
        doc.text(invoice.customerInfo.phone, 20, yPos)
        yPos += 8
      }
      if (invoice.customerInfo.address) {
        doc.setFontSize(10)
        const addressLines = doc.splitTextToSize(invoice.customerInfo.address, 80)
        doc.text(addressLines, 20, yPos)
        yPos += addressLines.length * 6
      }
      yPos += 10
    } else {
      yPos += 10
    }
    
    // Items Table Header
    doc.setFillColor(0, 0, 0) // Black background
    doc.rect(20, yPos, 170, 10, 'F')
    
    doc.setTextColor(255, 255, 255) // White text
    doc.setFontSize(10)
    doc.text('Code', 22, yPos + 7)
    doc.text('Description', 45, yPos + 7)
    doc.text('Qty', 115, yPos + 7)
    doc.text('Unit Price', 140, yPos + 7)
    doc.text('Total', 170, yPos + 7)
    
    yPos += 15
    
    // Items
    doc.setTextColor(0, 0, 0)
    invoice.items.forEach((item, index) => {
      // Alternate row background
      if (index % 2 === 1) {
        doc.setFillColor(245, 245, 245)
        doc.rect(20, yPos - 5, 170, 12, 'F')
      }
      
      doc.setFontSize(9)
      doc.text(item.kodProduk, 22, yPos + 2)
      
      // Wrap long product names
      const productName = doc.splitTextToSize(item.namaProduk, 50)
      doc.text(productName, 45, yPos + 2)
      
      doc.text(item.quantity.toString(), 115, yPos + 2)
      doc.text(`RM${item.finalPrice.toFixed(2)}`, 140, yPos + 2)
      
      doc.setTextColor(220, 38, 38) // Red for total
      doc.text(`RM${item.totalPrice.toFixed(2)}`, 170, yPos + 2)
      doc.setTextColor(0, 0, 0)
      
      yPos += Math.max(12, productName.length * 4)
    })
    
    yPos += 10
    
    // Total Amount Section
    const totalsStartX = 120
    // Total Amount
    doc.setFontSize(14)
    doc.setTextColor(220, 38, 38) // Red
    doc.text('Total Amount:', totalsStartX, yPos)
    doc.text(`RM${invoice.totalAmount.toFixed(2)}`, 180, yPos)
    
    yPos += 20
    
    // Notes (if any)
    if (invoice.notes) {
      doc.setFontSize(10)
      doc.setTextColor(0, 0, 0)
      doc.text('Notes:', 20, yPos)
      yPos += 8
      
      const notesLines = doc.splitTextToSize(invoice.notes, 170)
      doc.setTextColor(102, 102, 102)
      doc.text(notesLines, 20, yPos)
      yPos += notesLines.length * 6 + 10
    }
    
    // Footer
    const pageHeight = doc.internal.pageSize.height
    doc.setFontSize(8)
    doc.setTextColor(102, 102, 102)
    doc.text('Thank you for your business!', 105, pageHeight - 20, { align: 'center' })
    doc.text('Generated by Mechanic Parts & Invoice System', 105, pageHeight - 12, { align: 'center' })
    
    return doc
  }
  
  static downloadInvoicePDF(invoice) {
    const doc = this.generateInvoicePDF(invoice)
    const filename = `Invoice_${invoice.invoiceNumber}_${new Date(invoice.dateCreated).toISOString().split('T')[0]}.pdf`
    doc.save(filename)
  }
  
  static printInvoice(invoice) {
    const doc = this.generateInvoicePDF(invoice)
    const pdfBlob = doc.output('blob')
    const url = URL.createObjectURL(pdfBlob)
    
    const printWindow = window.open(url)
    printWindow.onload = function() {
      printWindow.print()
      printWindow.onafterprint = function() {
        printWindow.close()
        URL.revokeObjectURL(url)
      }
    }
  }
}

export default PDFGenerator
