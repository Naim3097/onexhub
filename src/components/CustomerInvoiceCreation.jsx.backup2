import React, { useState, useEffect } from 'react'
import { useCustomer } from '../context/CustomerContext'
import { useTransaction } from '../context/TransactionContext'
import { createCustomerInvoice, updateCustomerInvoice, getCustomerOrders } from '../utils/FirebaseDataUtils'
import { debugCustomerOrders } from '../utils/DebugCustomerOrders'
import { collection, query, orderBy, onSnapshot, doc, getDocs } from 'firebase/firestore'
import { db } from '../firebaseConfig'
import PDFGenerator from '../utils/PDFGenerator'

function CustomerInvoiceCreation({ setActiveSection }) {

  
  const [selectedCustomer, setSelectedCustomer] = useState(null)
  const [showCustomerModal, setShowCustomerModal] = useState(false)
  const [customerSearchTerm, setCustomerSearchTerm] = useState('')
  const [showViewInvoiceModal, setShowViewInvoiceModal] = useState(false)
  const [selectedInvoiceForView, setSelectedInvoiceForView] = useState(null)
  const [showEditInvoiceModal, setShowEditInvoiceModal] = useState(false)
  const [selectedInvoiceForEdit, setSelectedInvoiceForEdit] = useState(null)
  const [isUpdatingInvoice, setIsUpdatingInvoice] = useState(false)


  const [manualParts, setManualParts] = useState([])
  const [newPart, setNewPart] = useState({
    sku: '',
    partName: '',
    price: 0,
    quantity: 1
  })
  const [laborCharges, setLaborCharges] = useState([])
  const [newLaborCharge, setNewLaborCharge] = useState({
    description: '',
    amount: 0,
    hours: 0
  })
  const [invoiceMetadata, setInvoiceMetadata] = useState({
    workDescription: '',
    mechanicNotes: '',
    paymentTerms: '30 days',
    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
  })
  const [commissionSettings, setCommissionSettings] = useState({
    type: 'percentage', // 'percentage' or 'fixed'
    commissionPercent: 12.5, // Default commission percentage on total sales
    commissionFixed: 0 // Fixed commission amount
  })
  
  // Mechanic selection states
  const [selectedMechanic, setSelectedMechanic] = useState(null)
  const [mechanics, setMechanics] = useState([])
  const [isLoadingMechanics, setIsLoadingMechanics] = useState(false)
  const [isCreatingInvoice, setIsCreatingInvoice] = useState(false)
  const [createdInvoice, setCreatedInvoice] = useState(null)
  const [showInvoiceSuccess, setShowInvoiceSuccess] = useState(false)
  
  // Invoice Management States
  const [viewMode, setViewMode] = useState('create') // 'create', 'list'
  const [invoiceHistory, setInvoiceHistory] = useState([])
  const [isLoadingInvoices, setIsLoadingInvoices] = useState(false)
  const [invoiceError, setInvoiceError] = useState(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [statusFilter, setStatusFilter] = useState('all') // 'all', 'pending', 'paid', 'overdue'

  const { customers, customerSelected } = useCustomer()
  const { recordPayment } = useTransaction()

  // Set customer when selected from context
  useEffect(() => {
    console.log('🚨 useEffect triggered - customerSelected:', customerSelected)
    if (customerSelected) {
      console.log('🚨 Setting selected customer...')
      setSelectedCustomer(customerSelected)
    }
  }, [customerSelected])

  // Load invoice history from Firestore
  useEffect(() => {
    console.log('🚀 Setting up customer_invoices collection listener...')
    setIsLoadingInvoices(true)
    
    try {
      const invoicesRef = collection(db, 'customer_invoices')
      const invoicesQuery = query(invoicesRef, orderBy('dateCreated', 'desc'))
      
      const unsubscribe = onSnapshot(invoicesQuery, (snapshot) => {
        console.log('📊 Customer invoices data received:', snapshot.size, 'documents')
        
        const invoices = []
        snapshot.forEach((doc) => {
          const data = doc.data()
          invoices.push({
            id: doc.id,
            ...data,
            // Ensure dates are properly formatted
            dateCreated: data.dateCreated?.toDate ? data.dateCreated.toDate() : new Date(data.dateCreated),
            dueDate: data.dueDate?.toDate ? data.dueDate.toDate() : new Date(data.dueDate)
          })
        })
        
        setInvoiceHistory(invoices)
        setIsLoadingInvoices(false)
        setInvoiceError(null)
        
        console.log('✅ Customer invoices data processed:', invoices.length, 'records')
      }, (error) => {
        console.error('❌ Error loading customer invoices:', error)
        setInvoiceError(error.message)
        setIsLoadingInvoices(false)
      })
      
      return () => {
        console.log('🔌 Disconnecting from customer_invoices collection')
        unsubscribe()
      }
    } catch (error) {
      console.error('❌ Error setting up customer invoices listener:', error)
      setInvoiceError(error.message)
      setIsLoadingInvoices(false)
    }
  }, [])

  // Load mechanics from Firestore
  useEffect(() => {
    const loadMechanics = async () => {
      setIsLoadingMechanics(true)
      try {
        console.log('🔧 Loading mechanics from Firestore...')
        const mechanicsRef = collection(db, 'mechanics')
        const mechanicsQuery = query(mechanicsRef, orderBy('name', 'asc'))
        const mechanicsSnapshot = await getDocs(mechanicsQuery)
        
        const mechanicsData = mechanicsSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }))
        
        console.log('🔧 Mechanics loaded:', mechanicsData.length, 'mechanics')
        setMechanics(mechanicsData)
      } catch (error) {
        console.error('❌ Error loading mechanics:', error)
      }
      setIsLoadingMechanics(false)
    }
    
    loadMechanics()
  }, [])

  // Add manual part function
  const addManualPart = () => {
    if (!newPart.sku || !newPart.partName || newPart.price <= 0 || newPart.quantity <= 0) {
      alert('Please fill in all part details with valid values')
      return
    }

    const part = {
      id: Date.now(),
      ...newPart,
      total: newPart.price * newPart.quantity
    }

    setManualParts([...manualParts, part])
    setNewPart({
      sku: '',
      partName: '',
      price: 0,
      quantity: 1
    })
  }

  // Remove manual part function
  const removeManualPart = (partId) => {
    setManualParts(manualParts.filter(part => part.id !== partId))
  }

  const addLaborCharge = () => {
    if (!newLaborCharge.description || newLaborCharge.amount <= 0) {
      alert('Please enter description and amount for labor charge')
      return
    }

    const laborCharge = {
      id: Date.now(),
      ...newLaborCharge,
      type: 'labor'
    }

    setLaborCharges([...laborCharges, laborCharge])
    setNewLaborCharge({
      description: '',
      amount: 0,
      hours: 0
    })
  }

  const removeLaborCharge = (chargeId) => {
    setLaborCharges(laborCharges.filter(charge => charge.id !== chargeId))
  }

  const calculateTotals = () => {
    // Calculate parts total (from manually added parts)
    const partsSubtotal = manualParts.reduce((sum, part) => {
      return sum + (part.quantity * part.price)
    }, 0)
    
    // Calculate labor total
    const laborSubtotal = laborCharges.reduce((sum, charge) => sum + charge.amount, 0)
    
    // Combined subtotal (total sales before tax)
    const subtotal = partsSubtotal + laborSubtotal
    const tax = subtotal * 0.06 // 6% SST (Sales and Service Tax) for Malaysia
    const total = subtotal + tax
    
    // Calculate commission based on total sales (before tax)
    let totalCommission = 0
    
    if (commissionSettings.type === 'percentage') {
      totalCommission = subtotal * (commissionSettings.commissionPercent / 100)
    } else {
      totalCommission = commissionSettings.commissionFixed
    }
    
    // For backward compatibility, distribute commission proportionally
    let partsCommission = 0
    let laborCommission = 0
    
    if (subtotal > 0) {
      partsCommission = (partsSubtotal / subtotal) * totalCommission
      laborCommission = (laborSubtotal / subtotal) * totalCommission
    }
    
    return { 
      partsSubtotal, 
      laborSubtotal, 
      subtotal, 
      tax, 
      total, 
      totalCommission,
      partsCommission,
      laborCommission
    }
  }

  const createInvoice = async () => {
    if (!selectedCustomer) {
      alert('Please select a customer')
      return
    }
    
    if (!selectedMechanic) {
      alert('Please select a mechanic for commission tracking')
      return
    }
    
    if (manualParts.length === 0 && laborCharges.length === 0) {
      alert('Please add parts or labor charges to create an invoice')
      return
    }

    setIsCreatingInvoice(true)
    
    try {
      const totals = calculateTotals()
      
      console.log('📊 Creating invoice with totals:', totals)
      console.log('🏢 Selected customer:', selectedCustomer)
      console.log('� Selected mechanic:', selectedMechanic)
      console.log('�📦 Manual parts:', manualParts)
      console.log('⚡ Labor charges:', laborCharges)
      
      const invoiceData = {
        customerId: selectedCustomer.id,
        customerName: selectedCustomer.name,
        customerEmail: selectedCustomer.email || '',
        customerPhone: selectedCustomer.phone || '',
        
        // Parts from manual entry
        partsOrdered: manualParts.map(part => ({
          sku: part.sku,
          partName: part.partName,
          quantity: part.quantity,
          unitPrice: part.price,
          total: part.quantity * part.price,
          partId: part.id
        })),
        
        // Labor charges
        laborCharges: laborCharges,
        
        // Totals
        partsSubtotal: totals.partsSubtotal || 0,
        laborSubtotal: totals.laborSubtotal || 0,
        subtotal: totals.subtotal || 0,
        tax: totals.tax || 0,
        total: totals.total || 0,
        customerTotal: totals.total || 0, // Field expected by AccountingDashboard
        
        // Commission (hidden from customer)
        totalCommission: totals.totalCommission || 0,
        partsCommission: totals.partsCommission || 0,
        laborCommission: totals.laborCommission || 0,
        commissionSettings: commissionSettings, // Save commission configuration
        
        // Mechanic information for commission tracking
        mechanicId: selectedMechanic.id,
        mechanicName: selectedMechanic.name,
        mechanicRole: selectedMechanic.role || 'Technician',
        commissionRate: selectedMechanic.commissionRate || commissionSettings.commissionPercent,
        
        // Metadata
        workDescription: invoiceMetadata.workDescription || '',
        mechanicNotes: invoiceMetadata.mechanicNotes || '',
        paymentTerms: invoiceMetadata.paymentTerms || '30 days',
        dueDate: new Date(invoiceMetadata.dueDate),
        
        // Status and tracking
        status: 'draft',
        paymentStatus: 'pending',
        invoiceNumber: `INV-${Date.now()}`,
        createdAt: new Date(),
        createdBy: 'current-user'
      }

      console.log('💾 Invoice data being saved:', invoiceData)
      
      const invoiceId = await createCustomerInvoice(invoiceData)
      console.log('✅ Invoice created with ID:', invoiceId)
      
      // Store the created invoice data for PDF generation
      const createdInvoiceData = {
        id: invoiceId,
        ...invoiceData,
        customerInfo: {
          name: selectedCustomer.name,
          email: selectedCustomer.email,
          phone: selectedCustomer.phone,
          address: selectedCustomer.address || ''
        },
        items: [
          ...manualParts.map(part => ({
            kodProduk: part.sku,
            namaProduk: part.partName,
            quantity: part.quantity,
            finalPrice: part.price,
            totalPrice: part.quantity * part.price
          })),
          ...laborCharges.map(charge => ({
            kodProduk: 'LABOR',
            namaProduk: charge.description,
            quantity: charge.hours || 1,
            finalPrice: charge.amount,
            totalPrice: charge.amount
          }))
        ],
        totalAmount: totals.total,
        dateCreated: new Date()
      }
      
      setCreatedInvoice(createdInvoiceData)
      setShowInvoiceSuccess(true)
      
      // Invoice created successfully - it will have paymentStatus: 'pending' by default
      // No need to record payment here - that happens when customer actually pays
      
    } catch (error) {
      console.error('❌ Error creating invoice:', error)
      console.error('❌ Error details:', error.message)
      console.error('❌ Error stack:', error.stack)
      alert(`Failed to create invoice: ${error.message || 'Unknown error'}. Please check console for details and try again.`)
    }
    
    setIsCreatingInvoice(false)
  }

  const updateInvoice = async () => {
    if (!selectedInvoiceForEdit) {
      alert('No invoice selected for editing')
      return
    }
    
    if (!selectedCustomer) {
      alert('Please select a customer')
      return
    }
    
    if (!selectedMechanic) {
      alert('Please select a mechanic for commission tracking')
      return
    }
    
    if (manualParts.length === 0 && laborCharges.length === 0) {
      alert('Please add parts or labor charges to update the invoice')
      return
    }

    setIsUpdatingInvoice(true)
    
    try {
      const totals = calculateTotals()
      
      console.log('📊 Updating invoice with totals:', totals)
      
      const updatedInvoiceData = {
        customerId: selectedCustomer.id,
        customerName: selectedCustomer.name,
        customerEmail: selectedCustomer.email || '',
        customerPhone: selectedCustomer.phone || '',
        
        // Parts from manual entry
        partsOrdered: manualParts.map(part => ({
          sku: part.sku,
          partName: part.partName,
          quantity: part.quantity,
          unitPrice: part.price,
          total: part.quantity * part.price,
          partId: part.id
        })),
        
        // Labor charges
        laborCharges: laborCharges,
        
        // Totals
        partsSubtotal: totals.partsSubtotal || 0,
        laborSubtotal: totals.laborSubtotal || 0,
        subtotal: totals.subtotal || 0,
        tax: totals.tax || 0,
        total: totals.total || 0,
        customerTotal: totals.total || 0,
        
        // Commission (hidden from customer)
        totalCommission: totals.totalCommission || 0,
        partsCommission: totals.partsCommission || 0,
        laborCommission: totals.laborCommission || 0,
        commissionSettings: commissionSettings,
        
        // Mechanic information for commission tracking
        mechanicId: selectedMechanic.id,
        mechanicName: selectedMechanic.name,
        mechanicRole: selectedMechanic.role || 'Technician',
        commissionRate: selectedMechanic.commissionRate || commissionSettings.commissionPercent,
        
        // Metadata
        workDescription: invoiceMetadata.workDescription || '',
        mechanicNotes: invoiceMetadata.mechanicNotes || '',
        paymentTerms: invoiceMetadata.paymentTerms || '30 days',
        dueDate: new Date(invoiceMetadata.dueDate),
        
        // Keep existing status and dates, just update updatedAt
        updatedAt: new Date(),
        updatedBy: 'current-user'
      }

      console.log('💾 Updating invoice data:', updatedInvoiceData)
      
      // Update the invoice in Firestore
      await updateCustomerInvoice(selectedInvoiceForEdit.id, updatedInvoiceData)
      console.log('✅ Invoice updated successfully')
      
      // Close modal and refresh data
      setShowEditInvoiceModal(false)
      setSelectedInvoiceForEdit(null)
      
      // Reset form
      setSelectedCustomer(null)
      setManualParts([])
      setLaborCharges([])
      setSelectedMechanic(null)
      setInvoiceMetadata({
        workDescription: '',
        mechanicNotes: '',
        paymentTerms: '30 days',
        dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
      })
      
      // Reload invoice history
      loadInvoiceHistory()
      
      alert('Invoice updated successfully!')
      
    } catch (error) {
      console.error('❌ Error updating invoice:', error)
      alert(`Failed to update invoice: ${error.message || 'Unknown error'}. Please check console for details and try again.`)
    }
    
    setIsUpdatingInvoice(false)
  }

  const selectCustomer = (customer) => {
    console.log('🚨 selectCustomer called with:', customer)
    setSelectedCustomer(customer)
    setShowCustomerModal(false)
    setCustomerSearchTerm('') // Clear search when customer is selected
  }

  // Filter customers based on search term
  const filteredCustomers = customers.filter(customer =>
    customer.name?.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
    customer.phone?.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
    customer.email?.toLowerCase().includes(customerSearchTerm.toLowerCase())
  )

  const handleInvoiceSuccess = (action) => {
    // Reset form
    setSelectedCustomer(null)
    setManualParts([])
    setLaborCharges([])
    setNewPart({
      sku: '',
      partName: '',
      price: 0,
      quantity: 1
    })
    setInvoiceMetadata({
      workDescription: '',
      mechanicNotes: '',
      paymentTerms: '30 days',
      dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
    })
    setCreatedInvoice(null)
    setShowInvoiceSuccess(false)
    
    // Navigate based on action
    if (action === 'accounting') {
      setActiveSection('accounting')
    } else {
      setActiveSection('customers')
    }
  }

  const totals = calculateTotals()

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('ms-MY', {
      style: 'currency',
      currency: 'MYR'
    }).format(amount || 0)
  }

  const formatDate = (date) => {
    if (!date) return 'N/A'
    const dateObj = date.toDate ? date.toDate() : new Date(date)
    return dateObj.toLocaleDateString('en-MY', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  }

  const getFilteredInvoices = () => {
    let filtered = invoiceHistory
    
    // Filter by status
    if (statusFilter !== 'all') {
      filtered = filtered.filter(invoice => invoice.paymentStatus === statusFilter)
    }
    
    // Filter by search query
    if (searchQuery) {
      filtered = filtered.filter(invoice =>
        invoice.customerName?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        invoice.invoiceNumber?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        invoice.workDescription?.toLowerCase().includes(searchQuery.toLowerCase())
      )
    }
    
    return filtered
  }

  const viewInvoice = React.useCallback((invoiceData) => {
    console.log('🔍 VIEW INVOICE CLICKED - Invoice data:', invoiceData)
    console.log('🔍 Current modal state:', showViewInvoiceModal)
    setSelectedInvoiceForView(invoiceData)
    setShowViewInvoiceModal(true)
    console.log('🔍 View modal state set to true')
  }, [showViewInvoiceModal])

  const editInvoice = React.useCallback((invoiceData) => {
    console.log('✏️ EDIT INVOICE CLICKED - Invoice data:', invoiceData)
    console.log('✏️ Current modal state:', showEditInvoiceModal)
    setSelectedInvoiceForEdit(invoiceData)
    // Pre-populate form fields with existing invoice data
    setSelectedCustomer({
      id: invoiceData.customerId,
      name: invoiceData.customerName,
      phone: invoiceData.customerPhone,
      email: invoiceData.customerEmail
    })
    setManualParts(invoiceData.partsOrdered || [])
    setLaborCharges(invoiceData.laborCharges || [])
    setSelectedMechanic(invoiceData.mechanicId ? {
      id: invoiceData.mechanicId,
      name: invoiceData.mechanicName,
      role: invoiceData.mechanicRole
    } : null)
    setInvoiceMetadata({
      workDescription: invoiceData.workDescription || '',
      mechanicNotes: invoiceData.mechanicNotes || '',
      paymentTerms: invoiceData.paymentTerms || '30 days',
      dueDate: invoiceData.dueDate ? new Date(invoiceData.dueDate).toISOString().split('T')[0] : 
               new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
    })
    setShowEditInvoiceModal(true)
  }, [showEditInvoiceModal])

  const downloadInvoice = (invoiceData) => {
    if (invoiceData) {
      console.log('📄 Generating invoice PDF for:', invoiceData.invoiceNumber)
      
      try {
        // Prepare invoice data for PDF generation
        const pdfData = {
          ...invoiceData,
          isQuotation: false,
          type: 'invoice',
          // Format items for PDF - Fix: Use correct field names
          items: [
            ...(invoiceData.partsOrdered || []).map(part => ({
              kodProduk: part.sku,
              namaProduk: part.partName,
              quantity: part.quantity,
              finalPrice: part.unitPrice,
              totalPrice: part.total
            })),
            ...(invoiceData.laborCharges || []).map(charge => ({
              kodProduk: 'LABOR',
              namaProduk: charge.description,
              quantity: charge.hours || 1,
              finalPrice: charge.amount,
              totalPrice: charge.amount
            }))
          ],
          totalAmount: invoiceData.total,
          dateCreated: invoiceData.dateCreated || new Date(),
          dueDate: invoiceData.dueDate,
          paymentTerms: invoiceData.paymentTerms,
          mechanicNotes: invoiceData.mechanicNotes,
          workDescription: invoiceData.workDescription
        }
        
        PDFGenerator.downloadCustomerInvoicePDF(pdfData)
        console.log('✅ Invoice PDF generated successfully')
      } catch (error) {
        console.error('❌ Error generating invoice PDF:', error)
        alert('Failed to generate PDF. Please try again.')
      }
    }
  }



  return (
    <div className="p-6 max-w-6xl mx-auto">
      {/* Header with View Toggle */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-4">
          <h2 className="text-2xl font-bold">
            {viewMode === 'create' ? 'Create Customer Invoice' : 'Invoice Management'}
          </h2>
          <div className="flex rounded-lg border border-gray-200 overflow-hidden">
            <button
              onClick={() => setViewMode('create')}
              className={`px-4 py-2 text-sm font-medium ${
                viewMode === 'create'
                  ? 'bg-red-600 text-white'
                  : 'bg-white text-gray-700 hover:bg-gray-50'
              }`}
            >
              Create New
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={`px-4 py-2 text-sm font-medium ${
                viewMode === 'list'
                  ? 'bg-red-600 text-white'
                  : 'bg-white text-gray-700 hover:bg-gray-50'
              }`}
            >
              View History ({invoiceHistory.length})
            </button>
          </div>
        </div>
        <button
          onClick={() => setActiveSection('customers')}
          className="px-4 py-2 text-black-75 hover:text-primary-black"
        >
          Back to Customers
        </button>
      </div>

      {/* Invoice History View */}
      {viewMode === 'list' && (
        <div className="space-y-6">
          {/* Search and Filters */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="flex-1">
                <input
                  type="text"
                  placeholder="Search invoices by customer, number, or description..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full px-4 py-3 border border-black-25 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500"
                />
              </div>
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="px-4 py-3 border border-black-25 rounded-lg focus:ring-2 focus:ring-primary-red focus:border-primary-red"
              >
                <option value="all">All Status</option>
                <option value="pending">Pending</option>
                <option value="paid">Paid</option>
                <option value="overdue">Overdue</option>
              </select>
              <button
                onClick={() => {setSearchQuery(''); setStatusFilter('all')}}
                className="px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                Clear All
              </button>
            </div>
          </div>

          {/* Invoice List */}
          <div className="bg-primary-white rounded-lg border border-black-10 overflow-hidden">
            <div className="p-4 sm:p-6 border-b border-black-10">
              <h3 className="text-lg font-semibold text-primary-black">Invoice History</h3>
              <p className="text-black-75 text-sm">Manage and download existing invoices</p>
            </div>

            {isLoadingInvoices ? (
              <div className="p-8 text-center">
                <div className="loading-spinner mb-4"></div>
                <p className="text-black-50">Loading invoices...</p>
              </div>
            ) : invoiceError ? (
              <div className="p-8 text-center">
                <p className="text-primary-red">Error: {invoiceError}</p>
              </div>
            ) : getFilteredInvoices().length === 0 ? (
              <div className="p-8 text-center">
                <p className="text-black-50">
                  {searchQuery ? 'No invoices match your search.' : 'No invoices found.'}
                </p>
              </div>
            ) : (
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-black-5">
                    <tr>
                      <th className="px-4 py-3 text-left text-xs font-medium text-black-50 uppercase">Invoice</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-black-50 uppercase">Customer</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-black-50 uppercase">Mechanic</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-black-50 uppercase">Amount</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-black-50 uppercase">Due Date</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-black-50 uppercase">Status</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-black-50 uppercase">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-black-10">
                    {getFilteredInvoices().map((invoice) => {
                      const dueDate = new Date(invoice.dueDate)
                      const daysOverdue = Math.floor((Date.now() - dueDate.getTime()) / (1000 * 60 * 60 * 24))
                      
                      return (
                        <tr key={invoice.id} className="hover:bg-black-5" style={{ position: 'relative' }}>
                          <td className="px-4 py-4 text-sm">
                            <div className="font-medium text-primary-black">{invoice.invoiceNumber}</div>
                            <div className="text-black-50">{formatDate(invoice.dateCreated)}</div>
                          </td>
                          <td className="px-4 py-4 text-sm">
                            <div className="text-primary-black">{invoice.customerName}</div>
                            <div className="text-black-50">{invoice.partsOrdered?.length || 0} parts, {invoice.laborCharges?.length || 0} labor</div>
                          </td>
                          <td className="px-4 py-4 text-sm">
                            <div className="flex items-center">
                              <div className="p-1.5 bg-red-500 text-white rounded-full mr-2">
                                <svg className="w-3 h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                </svg>
                              </div>
                              <div>
                                <div className="text-primary-black font-medium">{invoice.mechanicName || 'Not Assigned'}</div>
                                {invoice.mechanicRole && (
                                  <div className="text-black-50 text-xs">{invoice.mechanicRole}</div>
                                )}
                              </div>
                            </div>
                          </td>
                          <td className="px-4 py-4 text-sm font-medium text-primary-black">
                            {formatCurrency(invoice.total)}
                          </td>
                          <td className="px-4 py-4 text-sm">
                            <div className="text-primary-black">{formatDate(invoice.dueDate)}</div>
                            {daysOverdue > 0 && (
                              <div className="text-primary-red text-xs font-medium">{daysOverdue} days overdue</div>
                            )}
                          </td>
                          <td className="px-4 py-4 text-sm">
                            <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                              invoice.paymentStatus === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                              invoice.paymentStatus === 'paid' ? 'bg-green-100 text-green-800' :
                              invoice.paymentStatus === 'overdue' ? 'bg-red-100 text-red-800' :
                              'bg-black-10 text-black-75'
                            }`}>
                              {invoice.paymentStatus?.charAt(0).toUpperCase() + invoice.paymentStatus?.slice(1) || 'Draft'}
                            </span>
                          </td>
                          <td className="px-4 py-4 text-sm">
                            <div className="flex space-x-2">
                              <button
                                onClick={() => {
                                  setSelectedInvoiceForView(invoice)
                                  setShowViewInvoiceModal(true)
                                }}
                                className="text-blue-600 hover:text-blue-800 font-medium cursor-pointer px-2 py-1 rounded hover:bg-blue-50"
                                title="View Details"
                                type="button"
                              >
                                View
                              </button>
                              <button
                                onClick={() => {
                                  setSelectedInvoiceForEdit(invoice)
                                  // Pre-populate form with invoice data
                                  setSelectedCustomer({
                                    id: invoice.customerId,
                                    name: invoice.customerName,
                                    phone: invoice.customerPhone,
                                    email: invoice.customerEmail
                                  })
                                  setManualParts(invoice.partsOrdered || [])
                                  setLaborCharges(invoice.laborCharges || [])
                                  setSelectedMechanic(invoice.mechanicId ? {
                                    id: invoice.mechanicId,
                                    name: invoice.mechanicName,
                                    role: invoice.mechanicRole
                                  } : null)
                                  setInvoiceMetadata({
                                    workDescription: invoice.workDescription || '',
                                    mechanicNotes: invoice.mechanicNotes || '',
                                    paymentTerms: invoice.paymentTerms || '30 days',
                                    dueDate: invoice.dueDate ? new Date(invoice.dueDate).toISOString().split('T')[0] : 
                                             new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
                                  })
                                  setShowEditInvoiceModal(true)
                                }}
                                className="text-green-600 hover:text-green-800 font-medium cursor-pointer px-2 py-1 rounded hover:bg-green-50"
                                title="Edit Invoice"
                                type="button"
                              >
                                Edit
                              </button>
                              <button
                                onClick={(e) => {
                                  e.preventDefault()
                                  e.stopPropagation()
                                  console.log('📄 DOWNLOAD BUTTON CLICKED for invoice:', invoice.invoiceNumber)
                                  downloadInvoice(invoice)
                                }}
                                className="text-primary-red hover:text-red-dark font-medium cursor-pointer px-2 py-1 rounded hover:bg-red-50"
                                title="Download PDF"
                                style={{ zIndex: 10 }}
                              >
                                Download
                              </button>
                            </div>
                          </td>
                        </tr>
                      )
                    })}
                  </tbody>
                </table>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Create Invoice View */}
      {viewMode === 'create' && (
        <div>

      {/* Customer Selection */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h3 className="text-lg font-semibold mb-4">Customer Information</h3>
        
        {selectedCustomer ? (
          <div className="border p-4 rounded-lg bg-red-10">
            <div className="flex justify-between items-start">
              <div>
                <h4 className="font-semibold text-lg">{selectedCustomer.name}</h4>
                <p className="text-black-75">{selectedCustomer.email}</p>
                <p className="text-black-75">{selectedCustomer.phone}</p>
              </div>
              <button
                onClick={() => setSelectedCustomer(null)}
                className="text-primary-red hover:text-red-dark"
              >
                Change Customer
              </button>
            </div>
          </div>
        ) : (
          <div>
            <button
              onClick={() => setShowCustomerModal(true)}
              className="px-6 py-3 bg-primary-red text-primary-white rounded-lg hover:bg-red-dark"
            >
              Select Customer
            </button>
          </div>
        )}
      </div>

      {/* Mechanic Selection */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h3 className="text-lg font-semibold mb-4">Mechanic Assignment</h3>
        <p className="text-sm text-black-75 mb-4">Select the mechanic responsible for this work</p>
        
        {selectedMechanic ? (
          <div className="flex items-center justify-between p-4 bg-red-10 rounded-lg">
            <div className="flex items-center">
              <div className="p-2 bg-primary-red text-white rounded-full mr-3">
                <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              </div>
              <div>
                <div className="font-medium text-primary-black">{selectedMechanic.name}</div>
              </div>
            </div>
            <button
              onClick={() => setSelectedMechanic(null)}
              className="px-4 py-2 text-sm text-primary-red border border-primary-red rounded-lg hover:bg-red-10"
            >
              Change Mechanic
            </button>
          </div>
        ) : (
          <div>
            {isLoadingMechanics ? (
              <div className="text-center py-4">
                <div className="loading-spinner inline-block"></div>
                <span className="ml-2 text-black-75">Loading mechanics...</span>
              </div>
            ) : (
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
                {mechanics.length > 0 ? (
                  mechanics.map((mechanic) => (
                    <button
                      key={mechanic.id}
                      onClick={() => setSelectedMechanic(mechanic)}
                      className="p-4 border border-black-25 rounded-lg hover:border-primary-red hover:bg-red-10 text-left transition-colors"
                    >
                      <div className="font-medium text-primary-black">{mechanic.name}</div>
                    </button>
                  ))
                ) : (
                  <div className="col-span-full text-center py-4 text-black-50">
                    No mechanics found. Please add mechanics in the system first.
                  </div>
                )}
              </div>
            )}
          </div>
        )}
      </div>

      {selectedCustomer && selectedMechanic && (
        <>
          {/* Manual Parts Entry */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <h3 className="text-lg font-semibold mb-4">Parts & Components</h3>
            <p className="text-sm text-black-75 mb-4">Add parts used for this customer's repair</p>
            
            {/* Add Part Form */}
            <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-4">
              <div>
                <label className="block text-sm font-medium text-primary-black mb-1">SKU Code</label>
                <input
                  type="text"
                  value={newPart.sku}
                  onChange={(e) => setNewPart({ ...newPart, sku: e.target.value })}
                  className="w-full px-3 py-2 border border-black-25 rounded-lg"
                  placeholder="e.g., BRK001"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-primary-black mb-1">Part Name</label>
                <input
                  type="text"
                  value={newPart.partName}
                  onChange={(e) => setNewPart({ ...newPart, partName: e.target.value })}
                  className="w-full px-3 py-2 border border-black-25 rounded-lg"
                  placeholder="e.g., Brake Pad Set"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-primary-black mb-1">Price (RM)</label>
                <input
                  type="number"
                  value={newPart.price}
                  onChange={(e) => setNewPart({ ...newPart, price: parseFloat(e.target.value) || 0 })}
                  className="w-full px-3 py-2 border border-black-25 rounded-lg"
                  placeholder="0.00"
                  min="0"
                  step="0.01"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-primary-black mb-1">Quantity</label>
                <input
                  type="number"
                  value={newPart.quantity}
                  onChange={(e) => setNewPart({ ...newPart, quantity: parseInt(e.target.value) || 1 })}
                  className="w-full px-3 py-2 border border-black-25 rounded-lg"
                  placeholder="1"
                  min="1"
                />
              </div>
              <div className="flex items-end">
                <button
                  onClick={addManualPart}
                  className="w-full px-4 py-2 bg-primary-red text-white rounded-lg hover:bg-red-dark"
                >
                  Add Part
                </button>
              </div>
            </div>

            {/* Parts List */}
            {manualParts.length > 0 ? (
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-black-25">
                  <thead className="bg-black-10">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-black-75 uppercase tracking-wider">SKU</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-black-75 uppercase tracking-wider">Part Name</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-black-75 uppercase tracking-wider">Quantity</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-black-75 uppercase tracking-wider">Unit Price</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-black-75 uppercase tracking-wider">Total</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-black-75 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {manualParts.map((part) => (
                      <tr key={part.id}>
                        <td className="px-6 py-4 whitespace-nowrap font-mono text-sm">{part.sku}</td>
                        <td className="px-6 py-4 whitespace-nowrap font-medium">{part.partName}</td>
                        <td className="px-6 py-4 whitespace-nowrap">{part.quantity}</td>
                        <td className="px-6 py-4 whitespace-nowrap">{formatCurrency(part.price)}</td>
                        <td className="px-6 py-4 whitespace-nowrap font-semibold">
                          {formatCurrency(part.quantity * part.price)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <button
                            onClick={() => removeManualPart(part.id)}
                            className="text-red-600 hover:text-red-800 text-sm"
                          >
                            Delete
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
                <div className="mt-4 text-right">
                  <p className="text-lg font-semibold">
                    Parts Subtotal: {formatCurrency(totals.partsSubtotal)}
                  </p>
                </div>
              </div>
            ) : (
              <div className="text-center py-8 text-black-50">
                <p className="text-lg">No parts added yet</p>
                <p className="text-sm mt-2">Use the form above to add parts used in this repair</p>
              </div>
            )}
          </div>

          {/* Labor Charges - This is the main section for customers without parts */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <h3 className="text-lg font-semibold mb-4">Labor Charges</h3>
            <p className="text-sm text-black-75 mb-4">Add work performed for this customer</p>
            
            {/* Add Labor Charge Form */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
              <div>
                <label className="block text-sm font-medium text-primary-black mb-1">Work Description</label>
                <input
                  type="text"
                  value={newLaborCharge.description}
                  onChange={(e) => setNewLaborCharge({ ...newLaborCharge, description: e.target.value })}
                  className="w-full px-3 py-2 border border-black-25 rounded-lg"
                  placeholder="e.g., Engine repair, Oil change"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-primary-black mb-1">Amount (RM)</label>
                <input
                  type="number"
                  value={newLaborCharge.amount}
                  onChange={(e) => setNewLaborCharge({ ...newLaborCharge, amount: parseFloat(e.target.value) || 0 })}
                  className="w-full px-3 py-2 border border-black-25 rounded-lg"
                  placeholder="0.00"
                  min="0"
                  step="0.01"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-primary-black mb-1">Hours (Optional)</label>
                <input
                  type="number"
                  value={newLaborCharge.hours}
                  onChange={(e) => setNewLaborCharge({ ...newLaborCharge, hours: parseFloat(e.target.value) || 0 })}
                  className="w-full px-3 py-2 border border-black-25 rounded-lg"
                  placeholder="0.0"
                  min="0"
                  step="0.1"
                />
              </div>
              <div className="flex items-end">
                <button
                  onClick={addLaborCharge}
                  className="w-full px-4 py-2 bg-primary-red text-white rounded-lg hover:bg-red-dark"
                >
                  Add Labor
                </button>
              </div>
            </div>

            {/* Labor Charges List */}
            {laborCharges.length > 0 && (
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-black-10">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hours</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {laborCharges.map((charge) => (
                      <tr key={charge.id}>
                        <td className="px-6 py-4 whitespace-nowrap font-medium">{charge.description}</td>
                        <td className="px-6 py-4 whitespace-nowrap">{charge.hours || '-'}</td>
                        <td className="px-6 py-4 whitespace-nowrap font-semibold">{formatCurrency(charge.amount)}</td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <button
                            onClick={() => removeLaborCharge(charge.id)}
                            className="text-red-600 hover:text-red-800"
                          >
                            Remove
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
                <div className="mt-4 text-right">
                  <p className="text-lg font-semibold">
                    Labor Subtotal: {formatCurrency(totals.laborSubtotal)}
                  </p>
                </div>
              </div>
            )}

            {laborCharges.length === 0 && (
              <div className="text-center py-4 text-gray-500">
                <p>No labor charges added yet</p>
              </div>
            )}
          </div>

          {/* Invoice Totals - Show only if there are parts or labor */}
          {(manualParts.length > 0 || laborCharges.length > 0) && (
            <div className="bg-white rounded-lg shadow-md p-6 mb-6">
              <h3 className="text-lg font-semibold mb-4">Invoice Summary</h3>
              
              <div className="space-y-2">
                {manualParts.length > 0 && (
                  <div className="flex justify-between">
                    <span>Parts Subtotal:</span>
                    <span>{formatCurrency(totals.partsSubtotal)}</span>
                  </div>
                )}
                {laborCharges.length > 0 && (
                  <div className="flex justify-between">
                    <span>Labor Subtotal:</span>
                    <span>{formatCurrency(totals.laborSubtotal)}</span>
                  </div>
                )}
                <div className="flex justify-between border-t pt-2">
                  <span>Subtotal:</span>
                  <span>{formatCurrency(totals.subtotal)}</span>
                </div>
                <div className="flex justify-between">
                  <span>SST (6%):</span>
                  <span>{formatCurrency(totals.tax)}</span>
                </div>
                <div className="flex justify-between border-t pt-2 text-lg font-bold">
                  <span>Total:</span>
                  <span>{formatCurrency(totals.total)}</span>
                </div>
                
                {/* Commission Info (Internal Only) */}
                <div className="mt-4 p-3 bg-red-10 border border-primary-red rounded">
                  <p className="text-sm font-medium text-primary-red">Internal Commission Info:</p>
                  <div className="text-sm text-primary-red space-y-1">
                    {manualParts.length > 0 && (
                      <div className="flex justify-between">
                        <span>Parts Commission ({commissionSettings.type === 'percentage' ? `${commissionSettings.commissionPercent}%` : 'Fixed'}):</span>
                        <span>{formatCurrency(totals.partsCommission)}</span>
                      </div>
                    )}
                    {laborCharges.length > 0 && (
                      <div className="flex justify-between">
                        <span>Labor Commission ({commissionSettings.type === 'percentage' ? `${commissionSettings.commissionPercent}%` : 'Fixed'}):</span>
                        <span>{formatCurrency(totals.laborCommission)}</span>
                      </div>
                    )}
                    <div className="flex justify-between font-semibold border-t pt-1">
                      <span>Total Commission:</span>
                      <span>{formatCurrency(totals.totalCommission)}</span>
                    </div>
                    {commissionSettings.useCustomTotal && (
                      <p className="text-xs text-primary-red italic">Using custom total commission</p>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Invoice Metadata */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <h3 className="text-lg font-semibold mb-4">Invoice Details</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-primary-black mb-1">Work Description</label>
                <textarea
                  value={invoiceMetadata.workDescription}
                  onChange={(e) => setInvoiceMetadata({ ...invoiceMetadata, workDescription: e.target.value })}
                  className="w-full px-3 py-2 border border-black-25 rounded-lg"
                  placeholder="Describe the work performed..."
                  rows="3"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-primary-black mb-1">Mechanic Notes (Internal)</label>
                <textarea
                  value={invoiceMetadata.mechanicNotes}
                  onChange={(e) => setInvoiceMetadata({ ...invoiceMetadata, mechanicNotes: e.target.value })}
                  className="w-full px-3 py-2 border border-black-25 rounded-lg"
                  placeholder="Internal notes..."
                  rows="3"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-primary-black mb-1">Payment Terms</label>
                <select
                  value={invoiceMetadata.paymentTerms}
                  onChange={(e) => setInvoiceMetadata({ ...invoiceMetadata, paymentTerms: e.target.value })}
                  className="w-full px-3 py-2 border border-black-25 rounded-lg"
                >
                  <option value="immediate">Immediate</option>
                  <option value="15 days">15 days</option>
                  <option value="30 days">30 days</option>
                  <option value="60 days">60 days</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-primary-black mb-1">Due Date</label>
                <input
                  type="date"
                  value={invoiceMetadata.dueDate}
                  onChange={(e) => setInvoiceMetadata({ ...invoiceMetadata, dueDate: e.target.value })}
                  className="w-full px-3 py-2 border border-black-25 rounded-lg"
                />
              </div>
            </div>
          </div>

          {/* Commission Configuration */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <h3 className="text-lg font-semibold mb-4">Commission Settings (Internal)</h3>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-primary-black mb-2">Commission Method</label>
              <div className="flex gap-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    value="percentage"
                    checked={commissionSettings.type === 'percentage'}
                    onChange={(e) => setCommissionSettings({ ...commissionSettings, type: e.target.value })}
                    className="mr-2"
                  />
                  Percentage of Total Sales
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    value="fixed"
                    checked={commissionSettings.type === 'fixed'}
                    onChange={(e) => setCommissionSettings({ ...commissionSettings, type: e.target.value })}
                    className="mr-2"
                  />
                  Fixed Amount
                </label>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                {commissionSettings.type === 'percentage' ? (
                  <div>
                    <label className="block text-sm font-medium text-primary-black mb-1">Commission Percentage (%)</label>
                    <input
                      type="number"
                      value={commissionSettings.commissionPercent}
                      onChange={(e) => setCommissionSettings({ ...commissionSettings, commissionPercent: parseFloat(e.target.value) || 0 })}
                      className="w-full px-3 py-2 border border-black-25 rounded-lg"
                      placeholder="12.5"
                      min="0"
                      max="100"
                      step="0.1"
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      {commissionSettings.commissionPercent}% of {formatCurrency(totals.subtotal)} (total sales) = {formatCurrency(totals.totalCommission)}
                    </p>
                  </div>
                ) : (
                  <div>
                    <label className="block text-sm font-medium text-primary-black mb-1">Commission Amount (RM)</label>
                    <input
                      type="number"
                      value={commissionSettings.commissionFixed}
                      onChange={(e) => setCommissionSettings({ ...commissionSettings, commissionFixed: parseFloat(e.target.value) || 0 })}
                      className="w-full px-3 py-2 border border-black-25 rounded-lg"
                      placeholder="0.00"
                      min="0"
                      step="0.01"
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      Fixed commission on total sales of {formatCurrency(totals.subtotal)}
                    </p>
                  </div>
                )}
              </div>

              <div className="flex items-center">
                <div className="text-sm text-gray-600 space-y-1">
                  <p><strong>Parts Subtotal:</strong> {formatCurrency(totals.partsSubtotal)}</p>
                  <p><strong>Labor Subtotal:</strong> {formatCurrency(totals.laborSubtotal)}</p>
                  <p className="text-lg font-semibold text-primary-red">
                    <strong>Total Sales:</strong> {formatCurrency(totals.subtotal)}
                  </p>
                  <p className="text-sm text-gray-500">Commission calculated on total sales before tax</p>
                </div>
              </div>
            </div>

            <div className="mt-4 p-3 bg-red-10 border border-primary-red rounded">
              <div className="flex justify-between items-center">
                <span className="font-semibold text-primary-red">Total Commission:</span>
                <span className="text-lg font-bold text-primary-red">{formatCurrency(totals.totalCommission)}</span>
              </div>
              <div className="text-sm text-primary-red mt-1">
                {commissionSettings.type === 'percentage' 
                  ? `${commissionSettings.commissionPercent}% of ${formatCurrency(totals.subtotal)}`
                  : `Fixed amount: ${formatCurrency(commissionSettings.commissionFixed)}`
                }
              </div>
            </div>
          </div>

          {/* Create Invoice Button */}
          <div className="text-center">
            <button
              onClick={createInvoice}
              disabled={isCreatingInvoice || (manualParts.length === 0 && laborCharges.length === 0)}
              className="px-8 py-3 bg-primary-red text-white rounded-lg hover:bg-red-dark disabled:bg-black-25 disabled:cursor-not-allowed"
            >
              {isCreatingInvoice ? 'Creating Invoice...' : 'Create Invoice'}
            </button>
            {manualParts.length === 0 && laborCharges.length === 0 && (
              <p className="text-sm text-gray-500 mt-2">
                Add parts or labor charges to create an invoice
              </p>
            )}
          </div>
        </>
      )}

      {/* Customer Selection Modal */}
      {showCustomerModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-96 overflow-hidden flex flex-col">
            <h3 className="text-lg font-semibold mb-4">Select Customer</h3>
            
            {/* Search Input */}
            <div className="mb-4">
              <input
                type="text"
                placeholder="Search by name, phone, or email..."
                value={customerSearchTerm}
                onChange={(e) => setCustomerSearchTerm(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            
            {/* Customer List */}
            <div className="flex-1 overflow-y-auto space-y-2">
              {filteredCustomers.length > 0 ? (
                filteredCustomers.map((customer) => (
                <div
                  key={customer.id}
                  onClick={() => selectCustomer(customer)}
                  className="p-4 border rounded-lg cursor-pointer hover:bg-black-10"
                >
                  <div className="font-semibold">{customer.name}</div>
                  <div className="text-sm text-gray-600">{customer.email}</div>
                  <div className="text-sm text-gray-600">{customer.phone}</div>
                </div>
              ))
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <p>No customers found matching "{customerSearchTerm}"</p>
                </div>
              )}
            </div>
            
            <div className="mt-6 text-center">
              <button
                onClick={() => setShowCustomerModal(false)}
                className="px-4 py-2 bg-black-25 text-primary-black rounded-lg hover:bg-black-50"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Invoice Success Modal */}
      {showInvoiceSuccess && createdInvoice && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="text-center">
              {/* Success Icon */}
              <div className="mx-auto flex items-center justify-center w-12 h-12 rounded-full bg-green-100 mb-4">
                <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>

              <h3 className="text-lg font-semibold text-primary-black mb-2">Invoice Created Successfully!</h3>
              <p className="text-sm text-black-75 mb-2">Invoice #{createdInvoice.invoiceNumber}</p>
              <p className="text-sm text-black-75 mb-4">
                Total: {formatCurrency(createdInvoice.totalAmount)}
              </p>
              <p className="text-sm text-black-50 mb-6">
                You can view and download this invoice from the Accounting Dashboard.
              </p>

              <div className="space-y-3">
                {/* Download Invoice PDF Button */}
                <button
                  onClick={() => downloadInvoice(createdInvoice)}
                  className="w-full px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center justify-center gap-2"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  Download Invoice PDF
                </button>
                
                {/* Go to Accounting Button */}
                <button
                  onClick={() => handleInvoiceSuccess('accounting')}
                  className="w-full px-4 py-3 bg-primary-red text-white rounded-lg hover:bg-red-dark flex items-center justify-center gap-2"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
                  Go to Accounting Dashboard
                </button>

                {/* Continue Button */}
                <button
                  onClick={() => handleInvoiceSuccess('continue')}
                  className="w-full px-4 py-2 border border-black-25 text-primary-black rounded-lg hover:bg-black-10"
                >
                  Continue to Customer Database
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* View Invoice Modal */}

      {showViewInvoiceModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-lg">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">Invoice Details</h2>
              <button 
                onClick={() => setShowViewInvoiceModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            {selectedInvoiceForView ? (
              <div className="space-y-4">
                {/* Invoice Info */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="font-medium text-gray-900 mb-2">Invoice Information</h3>
                  <div className="space-y-2 text-sm">
                    <p><span className="font-medium">Invoice #:</span> {selectedInvoiceForView.invoiceNumber || 'N/A'}</p>
                    <p><span className="font-medium">Date:</span> {selectedInvoiceForView.dateCreated?.toLocaleDateString() || 'N/A'}</p>
                    <p><span className="font-medium">Status:</span> 
                      <span className={`ml-2 px-2 py-1 rounded text-xs ${
                        selectedInvoiceForView.paymentStatus === 'paid' ? 'bg-green-100 text-green-800' :
                        selectedInvoiceForView.paymentStatus === 'overdue' ? 'bg-red-100 text-red-800' :
                        'bg-yellow-100 text-yellow-800'
                      }`}>
                        {selectedInvoiceForView.paymentStatus?.charAt(0).toUpperCase() + selectedInvoiceForView.paymentStatus?.slice(1) || 'Draft'}
                      </span>
                    </p>
                    <p><span className="font-medium">Total Amount:</span> {formatCurrency(selectedInvoiceForView.customerTotal || 0)}</p>
                  </div>
                </div>

                {/* Customer Info */}
                <div className="bg-blue-50 rounded-lg p-4">
                  <h3 className="font-medium text-gray-900 mb-2">Customer Information</h3>
                  <div className="space-y-2 text-sm">
                    <p><span className="font-medium">Name:</span> {selectedInvoiceForView.customerName || 'N/A'}</p>
                    <p><span className="font-medium">Phone:</span> {selectedInvoiceForView.customerPhone || 'N/A'}</p>
                    <p><span className="font-medium">Email:</span> {selectedInvoiceForView.customerEmail || 'N/A'}</p>
                  </div>
                </div>

                {/* Mechanic Info */}
                <div className="bg-red-50 rounded-lg p-4">
                  <h3 className="font-medium text-gray-900 mb-2">Mechanic In-charge</h3>
                  <div className="flex items-center">
                    <div className="p-2 bg-red-500 text-white rounded-full mr-3">
                      <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                    <div>
                      <p className="font-medium text-gray-900">{selectedInvoiceForView.mechanicName || 'Not Assigned'}</p>
                      <p className="text-sm text-gray-600">{selectedInvoiceForView.mechanicRole || 'Technician'}</p>
                    </div>
                  </div>
                </div>

                {/* Work Description (if available) */}
                {selectedInvoiceForView.workDescription && (
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h3 className="font-medium text-gray-900 mb-2">Work Description</h3>
                    <p className="text-sm text-gray-700">{selectedInvoiceForView.workDescription}</p>
                  </div>
                )}
              </div>
            ) : (
              <p>Loading invoice details...</p>
            )}
            
            <div className="mt-6 flex justify-end space-x-3">
              <button 
                onClick={() => setShowViewInvoiceModal(false)}
                className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
              >
                Close
              </button>
              <button 
                onClick={() => {
                  downloadInvoice(selectedInvoiceForView)
                  setShowViewInvoiceModal(false)
                }}
                className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
              >
                Download PDF
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Invoice Modal */}
      {showEditInvoiceModal && selectedInvoiceForEdit && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-lg">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">Edit Invoice: {selectedInvoiceForEdit.invoiceNumber}</h2>
              <button 
                onClick={() => {
                  setShowEditInvoiceModal(false)
                  setSelectedInvoiceForEdit(null)
                  // Reset form
                  setSelectedCustomer(null)
                  setManualParts([])
                  setLaborCharges([])
                  setSelectedMechanic(null)
                }}
                className="text-gray-500 hover:text-gray-700"
              >
                <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            {/* Customer Selection */}
            <div className="mb-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Customer Information</h3>
              <div className="border rounded-lg p-4 bg-gray-50">
                {selectedCustomer ? (
                  <div className="flex justify-between items-center">
                    <div>
                      <p className="font-semibold text-gray-900">{selectedCustomer.name}</p>
                      <p className="text-sm text-gray-600">{selectedCustomer.phone}</p>
                      <p className="text-sm text-gray-600">{selectedCustomer.email}</p>
                    </div>
                    <button
                      onClick={() => setShowCustomerModal(true)}
                      className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                    >
                      Change Customer
                    </button>
                  </div>
                ) : (
                  <button
                    onClick={() => setShowCustomerModal(true)}
                    className="w-full px-4 py-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-gray-400"
                  >
                    Select Customer
                  </button>
                )}
              </div>
            </div>

            {/* Mechanic Selection */}
            <div className="mb-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Mechanic Assignment</h3>
              <div className="border rounded-lg p-4 bg-gray-50">
                {selectedMechanic ? (
                  <div className="flex justify-between items-center">
                    <div className="flex items-center">
                      <div className="p-2 bg-red-500 text-white rounded-full mr-3">
                        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                      </div>
                      <div>
                        <p className="font-semibold text-gray-900">{selectedMechanic.name}</p>
                        <p className="text-sm text-gray-600">{selectedMechanic.role || 'Technician'}</p>
                      </div>
                    </div>
                    <select
                      value={selectedMechanic?.id || ''}
                      onChange={(e) => {
                        const mechanic = mechanics.find(m => m.id === e.target.value)
                        setSelectedMechanic(mechanic || null)
                      }}
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Select Mechanic</option>
                      {mechanics.map((mechanic) => (
                        <option key={mechanic.id} value={mechanic.id}>
                          {mechanic.name} - {mechanic.role || 'Technician'}
                        </option>
                      ))}
                    </select>
                  </div>
                ) : (
                  <select
                    value=""
                    onChange={(e) => {
                      const mechanic = mechanics.find(m => m.id === e.target.value)
                      setSelectedMechanic(mechanic || null)
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Select Mechanic</option>
                    {mechanics.map((mechanic) => (
                      <option key={mechanic.id} value={mechanic.id}>
                        {mechanic.name} - {mechanic.role || 'Technician'}
                      </option>
                    ))}
                  </select>
                )}
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Parts Section */}
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">Parts & Components</h3>
                
                {/* Add New Part Form */}
                <div className="border rounded-lg p-4 mb-4 bg-gray-50">
                  <h4 className="font-medium text-gray-700 mb-3">Add New Part</h4>
                  <div className="space-y-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">SKU/Part Code</label>
                      <input
                        type="text"
                        value={newPart.sku}
                        onChange={(e) => setNewPart(prev => ({ ...prev, sku: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Enter part SKU"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Part Name</label>
                      <input
                        type="text"
                        value={newPart.partName}
                        onChange={(e) => setNewPart(prev => ({ ...prev, partName: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Enter part name"
                      />
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Price (RM)</label>
                        <input
                          type="number"
                          step="0.01"
                          value={newPart.price}
                          onChange={(e) => setNewPart(prev => ({ ...prev, price: parseFloat(e.target.value) || 0 }))}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
                        <input
                          type="number"
                          min="1"
                          value={newPart.quantity}
                          onChange={(e) => setNewPart(prev => ({ ...prev, quantity: parseInt(e.target.value) || 1 }))}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                    </div>
                    <button
                      onClick={addManualPart}
                      className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                    >
                      Add Part
                    </button>
                  </div>
                </div>

                {/* Parts List */}
                <div className="border rounded-lg overflow-hidden">
                  <div className="bg-gray-50 px-4 py-3 border-b">
                    <h4 className="font-medium text-gray-700">Selected Parts</h4>
                  </div>
                  <div className="max-h-64 overflow-y-auto">
                    {manualParts.length > 0 ? (
                      <div className="divide-y divide-gray-200">
                        {manualParts.map((part, index) => (
                          <div key={index} className="p-4 hover:bg-gray-50">
                            <div className="flex justify-between items-start">
                              <div className="flex-1">
                                <p className="font-medium text-gray-900">{part.partName}</p>
                                <p className="text-sm text-gray-600">SKU: {part.sku}</p>
                                <p className="text-sm text-gray-600">
                                  RM {part.price.toFixed(2)} × {part.quantity} = RM {(part.price * part.quantity).toFixed(2)}
                                </p>
                              </div>
                              <button
                                onClick={() => removeManualPart(index)}
                                className="text-red-600 hover:text-red-800 p-1"
                              >
                                <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="p-8 text-center text-gray-500">
                        No parts added yet
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Labor Section */}
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">Labor & Services</h3>
                
                {/* Add New Labor Form */}
                <div className="border rounded-lg p-4 mb-4 bg-gray-50">
                  <h4 className="font-medium text-gray-700 mb-3">Add New Labor</h4>
                  <div className="space-y-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                      <input
                        type="text"
                        value={newLaborCharge.description}
                        onChange={(e) => setNewLaborCharge(prev => ({ ...prev, description: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Enter labor description"
                      />
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Amount (RM)</label>
                        <input
                          type="number"
                          step="0.01"
                          value={newLaborCharge.amount}
                          onChange={(e) => setNewLaborCharge(prev => ({ ...prev, amount: parseFloat(e.target.value) || 0 }))}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Hours</label>
                        <input
                          type="number"
                          step="0.1"
                          value={newLaborCharge.hours}
                          onChange={(e) => setNewLaborCharge(prev => ({ ...prev, hours: parseFloat(e.target.value) || 0 }))}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                    </div>
                    <button
                      onClick={addLaborCharge}
                      className="w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                    >
                      Add Labor
                    </button>
                  </div>
                </div>

                {/* Labor List */}
                <div className="border rounded-lg overflow-hidden">
                  <div className="bg-gray-50 px-4 py-3 border-b">
                    <h4 className="font-medium text-gray-700">Labor Charges</h4>
                  </div>
                  <div className="max-h-64 overflow-y-auto">
                    {laborCharges.length > 0 ? (
                      <div className="divide-y divide-gray-200">
                        {laborCharges.map((labor, index) => (
                          <div key={index} className="p-4 hover:bg-gray-50">
                            <div className="flex justify-between items-start">
                              <div className="flex-1">
                                <p className="font-medium text-gray-900">{labor.description}</p>
                                <p className="text-sm text-gray-600">
                                  RM {labor.amount.toFixed(2)} ({labor.hours}h)
                                </p>
                              </div>
                              <button
                                onClick={() => removeLaborCharge(index)}
                                className="text-red-600 hover:text-red-800 p-1"
                              >
                                <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="p-8 text-center text-gray-500">
                        No labor charges added yet
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Invoice Metadata */}
            <div className="mt-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Invoice Details</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Work Description</label>
                  <textarea
                    value={invoiceMetadata.workDescription}
                    onChange={(e) => setInvoiceMetadata(prev => ({ ...prev, workDescription: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows="3"
                    placeholder="Describe the work performed"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Mechanic Notes</label>
                  <textarea
                    value={invoiceMetadata.mechanicNotes}
                    onChange={(e) => setInvoiceMetadata(prev => ({ ...prev, mechanicNotes: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows="3"
                    placeholder="Internal notes for the mechanic"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Payment Terms</label>
                  <select
                    value={invoiceMetadata.paymentTerms}
                    onChange={(e) => setInvoiceMetadata(prev => ({ ...prev, paymentTerms: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="immediate">Immediate</option>
                    <option value="7 days">7 days</option>
                    <option value="15 days">15 days</option>
                    <option value="30 days">30 days</option>
                    <option value="60 days">60 days</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Due Date</label>
                  <input
                    type="date"
                    value={invoiceMetadata.dueDate}
                    onChange={(e) => setInvoiceMetadata(prev => ({ ...prev, dueDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>
            </div>

            {/* Summary */}
            {(manualParts.length > 0 || laborCharges.length > 0) && (
              <div className="mt-6 border-t pt-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Invoice Summary</h3>
                <div className="bg-gray-50 rounded-lg p-4">
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>Parts Subtotal:</span>
                      <span>RM {calculateTotals().partsSubtotal.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Labor Subtotal:</span>
                      <span>RM {calculateTotals().laborSubtotal.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Subtotal:</span>
                      <span>RM {calculateTotals().subtotal.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Tax ({(calculateTotals().taxRate * 100).toFixed(1)}%):</span>
                      <span>RM {calculateTotals().tax.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between font-semibold text-lg border-t pt-2">
                      <span>Total Amount:</span>
                      <span>RM {calculateTotals().total.toFixed(2)}</span>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Action Buttons */}
            <div className="mt-8 flex justify-end space-x-4">
              <button 
                onClick={() => {
                  setShowEditInvoiceModal(false)
                  setSelectedInvoiceForEdit(null)
                  // Reset form
                  setSelectedCustomer(null)
                  setManualParts([])
                  setLaborCharges([])
                  setSelectedMechanic(null)
                }}
                className="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
              >
                Cancel
              </button>
              <button 
                onClick={updateInvoice}
                disabled={isUpdatingInvoice}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isUpdatingInvoice ? 'Updating...' : 'Update Invoice'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default CustomerInvoiceCreation
